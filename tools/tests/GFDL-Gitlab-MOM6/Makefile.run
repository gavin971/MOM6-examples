# Executable targets: build/compiler/mode/mom6_memory/mom6_configuration/MOM6
#
#   compiler = gnu, intel, pgi, cray, ...
#   mode = repro, debug, coverage, ...
#   If mom6_memory = dynamic or dynamic_symmetric
#     mom6_configuration = ocean_only, ice_ocean_SIS, ice_ocean_SIS2, land_ice_ocean_LM3_SIS2, coupled_AM2_LM3_SIS, coupled_AM2_LM3_SIS2
#   If mom6_memory = static
#     mom6_configuration = ocean_only/DOME ocean_only/benchmark ocean_only/double_gyre ...

CONFIGS = MOM6-examples
BUILD = build
MPIRUN = aprun
SHELL = bash
COMPILERS = gnu intel pgi
LOG = > log

all:

# Converts a path a/b/c to a list "a b c"
slash_to_list = $(subst /, ,$(1))
# Replaces a path a/b/c with ../../../
noop =
rel_path = $(subst $(noop) $(noop),,$(patsubst %,../,$(call slash_to_list,$(1))))

manifest.mk:
	bash MOM6-examples/tools/tests/GFDL-Gitlab-MOM6/generate_manifest.sh > manifest.mk

# Running
include manifest.mk

MODE = repro
MEMORY ?= dynamic

ifeq ($(MEMORY),static)
# Static pathway for building ocean.stats.*
define run-static-model
$(CONFIGS)/%/ocean.stats.$(1):
	echo $(BUILD)/$(1)/$$(MODE)/static/$$*/MOM6"("$$(STATIC_NPES)")" "=>" $$@
	cd $$(@D) && rm -rf Depth_list.nc CPU_stats.$(1) time_stamp.out $$(@F) RESTART && mkdir RESTART
	cd $$(@D) && tic=$$$$(date +%s) && \
	OMP_NUM_THREADS=1 KMP_STACKSIZE=512m NC_BLKSZ=1M time $(MPIRUN) -n $$(STATIC_NPES) $$(call rel_path,$$(@D))$(BUILD)/$(1)/$$(MODE)/static/$$*/MOM6 > log.$(1).out && \
	toc=$$$$(date +%s) && echo $$$$(($$$$toc-$$$$tic)) > walltime.$(1).out
endef
$(foreach c,gnu intel pgi,$(eval $(call run-static-model,$(c))))

# e.g. gnu_static, ...
define generate-targets
$(1)_static_ocean_only: $(foreach e,$(STATIC_OCEAN_ONLY),$(e)/ocean.stats.$(1))
endef
$(foreach c,$(COMPILERS),$(eval $(call generate-targets,$(c))))

else
# Static pathway for building ocean.stats.*
define run-dynamic-model
$(CONFIGS)/$(2)/%/ocean.stats.$(1):
	echo $(BUILD)/$(1)/$$(MODE)/$$(MEMORY)/$(2)/MOM6"("$$(NPES)")" "=>" $$@
	cd $$(@D) && rm -rf Depth_list.nc CPU_stats.$(1) time_stamp.out $$(@F) RESTART && mkdir RESTART
	cd $$(@D) && tic=$$$$(date +%s) && \
	OMP_NUM_THREADS=1 KMP_STACKSIZE=512m NC_BLKSZ=1M time $(MPIRUN) -n $$(NPES) $$(call rel_path,$$(@D))$(BUILD)/$(1)/$$(MODE)/$$(MEMORY)/$(2)/MOM6 > log.$(1).out && \
	toc=$$$$(date +%s) && echo $$$$(($$$$toc-$$$$tic)) > walltime.$(1).out
endef
$(foreach c,gnu intel pgi,$(foreach o,ocean_only ice_ocean_SIS2 land_ice_ocean_LM3_SIS2 coupled_AM2_LM3_SIS coupled_AM2_LM3_SIS2,$(eval $(call run-dynamic-model,$(c),$(o)))))

define stats-files
$$(shell grep " NPES" manifest.mk | grep $(1) | sed 's/%:.*/$(2)/')
endef

# e.g. gnu_ocean_only, ..., gnu_all
define generate-targets
MOM6-examples/ocean_only/circle_obcs/ocean.stats.$(1): MEMORY=dynamic_symmetric
$(1)_ocean_only: $(call stats-files,ocean_only,$(1))
$(1)_ice_ocean_SIS2: $(call stats-files,ice_ocean_SIS2,$(1))
$(1)_land_ice_ocean_LM3_SIS2: $(call stats-files,land_ice_ocean_LM3_SIS2,$(1))
$(1)_coupled_AM2_LM3_SIS: $(call stats-files,coupled_AM2_LM3_SIS/,$(1))
$(1)_coupled_AM2_LM3_SIS2: $(call stats-files,coupled_AM2_LM3_SIS2,$(1))
$(1)_all: $(call stats-files,/,$(1))
endef
$(foreach c,$(COMPILERS),$(eval $(call generate-targets,$(c))))
endif

clean_gnu:
	find $(CONFIGS) -name "ocean.stats.gnu" -exec rm {} \;
clean_intel:
	find $(CONFIGS) -name "ocean.stats.intel" -exec rm {} \;
clean_pgi:
	find $(CONFIGS) -name "ocean.stats.pgi" -exec rm {} \;
clean:
	find $(CONFIGS) -name "*.out" -exec rm {} \;
